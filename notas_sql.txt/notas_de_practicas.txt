

Lección 3 
Hacer tablas de costumers, products, 
Create table "table_name"( 
#darle todas las columnas, darle todos los tipo de datos por columna. 
"column 1" "data type for column 1" [], 
"column 2" "data type for column 2" [], 
[constraints]*opcional. acabar con semicolon ); 
Constraints existentes:
    NOT NULL: Ensures that a column cannot have NULL value
    DEFAULT: Provides a default value for a column when none is specified
    UNIQUE: Ensures all values in a column are different
    CHECK: Makes sure that all values in a column satisfy certain criteria. 
    Primary Key: Used to uniquely identify a row in the table
    Foreign Key: Used to ensure referential integrity of the data. 
Take personal: Ok los constraints son las notas o metadatos sobre las columnas. Que condiciones o tipos de datos generales tiene la tabla.
tip: verbos en mayúsculas son mejores para diferenciar los queries. 

    PRIMARY Key. 
    Identifica de manera única cada fila en una tabla. 
    Pueden ser una o más columnas, si más de una se conoce como clave compuesta. 
    Foreign key. 
    Identifica una columna de otra tabla (muy frecuentemente su clave primaria)
    El objetivo de las claves foraneas es garantizar integridad de referencialidad de los datos. 

Ejemplo
Bueno para hacer la tabla se va a la base de datos click derecho query tool: 
    ejemplo: 
    CREATE table customer_table(
Cust_id int, 
First_name varchar, 
Last_name varchar, 
age int, 
email_id varchar);
y para revisarla se va a Schemas, tables y ahí aparece registrada. 

Equivalente en Big Query 
INT64 (en lugar de int)
FLOAT64, NUMERIC, BOOL,
STRING, DATE, DATETIME
no hay constraints (no primary key, foreign key, unique)

Create a new project in Big Query 
Botón New Project > Nombrar > crear nuevo conjunto de datos > nombrar > crear tabla o desde query >
ejemplo de query: 
 create table DB_1.customer_table (
  cust_id int64, 
  First_name string, 
  Last_name string, 
  age int64,
  email string
);

Caso práctico: 
Crear una base de datos "Classroom" con una tabla "Science_class" con 3 columnas y sus tipos de datos. 
Query: 
CREATE TABLE Science_class(
Enrollment_no Int, 
Name Varchar, 
Science_Marks int
); 

INSERT INTO 
    Sintaxis
        INSERT INTO "table_name"("column1", "column2", ...)
        VALUES ("value1", "value2", ...)
    
Single Row 
INSERT INTO customer_table
VALUES (1, 'bee', 'cee', 32, 'bc@xyz.com'); #se pueden especificar nombres (cust_id, first_name, age, email_id) #no sirve doble comillas.

Multiple Rows 
INSERT INTO customer_table 
VALUES (3, 'ee', 'ef', 27, 'ef@xyz.com'),
(1, 'gee', 'eh', 42, 'gh@xyz.com'), 
...; 

Import data from files 
COPY "table_name" ("column1", "column2", ...)
FROM 'C:\tmp\persons.csv' Delimiter ',' CSV HEADER;

#Se hace práctica usando el folder resources #pedirmelo a mi 
query ejemplo: 
COPY customer_table from 
'C:\Users\david\Documents\main\Assets\Google-BigQuery-PostgreSQL-_-Big-Query-for-Data-Analysis\Data\Data_copy\copy.csv' delimiter ',' csv header;
    Luego revisar en tablas, click derecho, ver, ver todos los registros

#Noté que no hubo resultados añadidos arreglaré la ruta cambiando la dirección de los slashes
"C:/Users/Public/Documents/PostgresData/postgresql_data_resources/Data/Data_copy/copy.csv"
#tuve que poner en una carpeta pública para que postgres tuviera acceso. No podía acceder a carpetas de usuario. 

BigQuery
No hay copy statement. 
    Google biquery o google cloud shell. 

Se selecciona la base de datos, crear tabla, upload, browse file, 
    en que proyecto base de datos tabla o nombrar tabla, hay opcion auto detectar columnas y tipos en schema, 
        en opciones avanzadas hay detalles como escribir si vacio hacer un apendice o sobreescribir.
            Header rows to skip 1. Porque sino trata como dato los nombres de las columnas. 
#si algun tipo de datos no es constante generara un error. Se puede hacer una excepcion de cantidad de errores. La data debe estar limpia *buenas prácticas
Recordar revisar el schema ya que usualmente se usa auto. Sino pues Edit Schema (button) y cambiarlo. 

    constraints de cargar datos locales
        Tamaño: menos de 10 mb
        Filas: menos de 16K. 
            Si no: 
                Cargar desde drive o google cloud shell

Archivos grandes
    Descargar google cloud sdk 
        log in desde google 
            seleccionar proyecto en nube (nombre de proyectos en bigquery el display gráfico es una terminal sdk shell)
                bq --skip_leading_rows=1 load table_name (ejemplo: DB_1.customer_table) copy.csv (name of file)

Importing from google drive 
    Create table > Drive > URL > 
        Ventajas: no pagas por el almacenamiento por que es datos que tienes en el drive. 

#Ejercicio de importación e insertado. 
INSERT INTO science_class VALUES
(1, 'Popeye', 33),
(2, 'Olive', 54),
(3, 'Brutus', 98);

COPY science_class from 'C:/Users/Public/Documents/PostgresData/postgresql_data_resources/Data/Student.csv' delimiter ',' csv header;

select * from science_class;

SELECT 
Se pueden decir las columnas específicas FROM table_name
Las tablas resultantes se llaman conjuntos de resultados.

* = wildcard. Selecciona todo

Ejemplos
    Una columna
        SELECT first_name FROM customer_table
    Múltiples columnas
        SELECT first_name, last_name FROM customer_table

Ejercicio 
    Seleccionar nombres primarios y departamentos de la tabla de empleados 
    SELECT FirstName, Department FROM Employees;

En BigQuery 
Similar. 
    SELECT First_name FROM DB_1.customer_table
    En BigQuery se especifica no solo tabla sino también base de datos. 

Select Distinct 
    Elimina duplicados de una columna o más. = valores únicos.
    select distinct first_name from customer_table; 
    
    Si se usa * y no son duplicados perfectos no se eliminan. 
        Ej. 
        select distinct Grade from Students;
    Distinct in BigQuery is similar. 

Where command 
    -Especificar una condición- mientras se consigue la info de una tabla. 

    Select first_name from customer_table where age = 25; (puede ser más y es menos específico)
    Ej. 
        Select Name from Students where Age > 17; 
Multiples condiciones se ocupa and or operators. 

operadores And & or 
    Conjuntivos (unen condiciones)

    select first_name, last_name from customer_table where age > 20 and age < 30;
    ej. udemy
    select Name from Students where Grade='A' or Grade='A-';
Not 
    negación
    ejemplo
        select * from customer_table where not age=25;

Update 
    Usado para modificar los records existentes en una tabla.
    update table_name set column1 = [value1], column2=[value2], 
    where "condition"; #si es sobre toda la tabla pues sin condición. 

    Ej. PgAdmin 
    select * from customer_table where cust_id=2;
    update customer_table set last_name='Pe', age=17 where cust_id=2;
    Ej. sql udemy  
    update Students set Age = 19 where Name='John';
    select * from Students;

Delete 
    Sirve para eliminar registros de una tabla
    Delete from customers where id=6;
    múltiples filas
    delete from customers where Age>25; 
    todas las filas
    delete from customers; 

    ejercicio udemy - Eliminar estudiante Michael.
    delete from Students where Name='Michael';
    select * from Students; 

Alter
    Cambiar la definición o estructura de una tabla existente. 
    Sintaxis
    Alter Table table_name [Specify Actions]; 

    Acciones posibles
    Columns - Add, Delete, Modify, Rename
    constraints -Add, drop
    Index - Add, drop

    Alter Table table_name Add column_name data_type; 

    Ejemplos Añadir columna y eliminarla: 
    alter table customer_table add test varchar(255); 
    alter table customer_table drop test;

    alter table customer_table alter column age type varchar(255);
    alter table customer_table rename column email_id to customer_email;

    Constraints
    alter table table_name alter column col_name set not null; 
    alter table table_name alter column col_name drop not null; 
    alter table table_name add constraint col_nmae check ('col_name'>=100);
    alter table table_name add primary key ('col_name');
    alter table 'child_table' add constraint 'child_col' foreign_key('parent_col') references 'parent_table';

    alter table customer_table alter column cust_id drop not null; 
    alter table customer_table add_constraint cust_id check (cust_id>0); 
    insert into customer_table values (-1, 'cc', 'dd', '67', 'cd@xyz.com'); #no va a correr por el constraint previo añadido.

    delete from customer_table; #no values
    alter table customer_table add primary key (cust_id);

    Alter in BigQuery
    No podemos eliminar ninguna columna ni cambiar sus tipos de datos no se puede añadir constraints
        solo se puede crear otra tabla
    

Restore and Back-up
    Restore
        Sirve para generar tablas en una base de datos a partir de un archivo trata
    Proceso
        Se genera una base de datos nombrada
            Click izquierdo > Restore > seleccionar archivo.tar > restore 
                Observar en schemas las tablas restauradas mediante queries. 

    Restauraciones alternas
        Desde CSV 
        create table customer (customer_id varchar primary key, customer_name varchar, segment varchar, age int, country varchar, city varchar, state varchar, postal_code bigint, region varchar);

        create table product (
            product_id varchar primary key, 
            category varchar, sub_category varchar,
            product_name varchar
        );

        create table sales (
            order_line int primary key, 
            order_id varchar, 
            order_date date, 
            ship_date date, 
            ship_mode varchar, 
            customer_id varchar, 
            product_id varchar, 
            sales numeric, 
            quantity int, 
            discount numeric, 
            profit numeric);

        copy data from the customer CSV file
        copy customer from 'C:\Program Files\PostgreSQL\12\data\dataset\Customer.csv' CSV header;  
        copy product from 'C:\Program Files\PostgreSQL\12\data\dataset\Product.csv' CSV header;  
        copy sales from 'C:\Program Files\PostgreSQL\12\data\dataset\Sales.csv' CSV header;  

        en mi caso: 
        "C:/Users/Public/Data/Customer.csv"
        "C:/Users/Public/Data/Product.csv"
        "C:/Users/Public/Data/Sales.csv"
        
        En BigQuery 
        Crear dataset, crear tabla, upload browse. rows to skip = 1 y autodetect schema. 
            revisar las filas y si no tienen nombres y tipos correctos subirlos de forma manual eliminando la tabla con mala deteccion automatica. 
                Introducir manualmente los nombres y tipos saltar una fila y revisar en detalles el numero de registros son buenas practicas. 

        Noté que aunque se importaron bien las tablas la tabla Sales tiene variación con los nombres de los del curso. 
            Se puede o modificar el CSV o bien usar 
            alter table Sales 
            rename column "Order Line" to Order_Line
            rename column "Order ID" to Order_ID 
            rename column  "Order Date" to Order_Date
            rename column "Ship Date" to Ship_Date
            rename column "Ship_Mode" to Ship_Mode 
            rename column "Customer ID" to Customer_ID
            rename column "Product ID" to Product_ID;


        Desde directorio
            Create database
                from directory format directory select directory (folder)

        Desde backup file
        dataset backup tar file browse *donde dejarlo* create 
        restore y buscas tu archivo. Aqui es importante darte cuenta donde guardaste el tar en primer lugar. 

        Desde .sql file 

    Restore and Backup 

    Querying commands

    Filtrado
        IN 
            apoya a reducir la necesidad de utilizar multiples condiciones or en una declaracion select, insert, update o delete. 
                select "column_name" from "table_name" 
                where "column_name" IN ('value1', 'value2', ...)

            select * from customer where city IN (`Philadelphia`, `Seattle`);

            select * from customer where city = `Philadelphia` or `Seattle`;

            Ejercicio recupera nombres Name de los estudiantes Students cuya calificacion Grade es A o B usando IN. 

            BigQuery ejemplo
            select * from DB.Customer where city in ('Philadelphia', 'Seattle', 'Chicago');


        Between
            Se usa para recuperar valores con un rango en una declaracion select, insert, update o delete. 
            Entonces valor arriba y valor abajo. 

            Sintaxis 
            select column_name
            from table_name
            where column_name between value1 and value2;

            select * from customer where age Between 20 and 30;

            select * from customer where age not between 20 and 30; 

            select * from sales where ship_date between '2015-04-01' and '2016-04-01';

            BigQuery 
            select * from DB.Customer where age between 20 and 30;

            el resultado es inclusivo si tiene 20 y 30. 

            ejemplo de codigo: 
            select Name from Students where age between 22 and 30;

        Like 
            select column_name from table_name where column_name like pattern; 

            se usan wildcards 
            % any string of any length 
            _ single character 

            A% empieza con A 
            %A acaba con a
            A%B empierza con A acaba con B 

            AB_C empieza con AB hay un caracter y luego una C.

            ejemplos 
            select * from customer where customer_name like 'J%'; 

            select * from customer where customer_name like '%Nelson%'; 

            select * from customer where customer_name Like '____%'; 

            select distinct city from customer where city not like 'S%'; 

            select * from customer where customer_name like 'G\%'; 

            ejercicio en like de udemy
            select Name from Students where Name like 'J%';

        Like in BigQuery
            Hay alguna diferencia? 
                parece ser igual
            select * from DB.Sales where Product_ID like 'OFF%';

            Ejercicios
            /* Seleccionar las ciudades donde
            la region sea north o east sin duplicados
            mediante IN
            */ 
            select distinct city from customer where region in ('North', 'East');

            /* Seleccionar la lista de ordenes donde
            hay ventas entre 100 y 500 usando between */
            select order_id from sales where sales between 100 and 500;
            /* 
             Seleccionar lista de customers cuyo 
             last_name contiene solo 4 caracteres
             usando like
            */

            select customer_id from customer where customer_name like '% ____';
    
    Ordenamiento 
        Order by 
        solo se puede usar en declaraciones select y ordena los resultados por una o mas columnas

        Sintaxis
        select column_name
        from table_name 
        where condition
        order by column_name asc o desc; 

        mas de una columna 
        order by col_1 asc, col_2 asc; 

        ejemplos
        select * from customer\
        where state = 'California' 
        order by Customer_name; 

        =
        select * from customer
        where state = 'California'
        order by customer_name ASC; 

        select * from customer
        order by 2 desc;

        select * from customer where age>25
        order by city asc, 
        Customer_name desc; 

        select * from custoemr 
        order by age; 

        Pregunta SQL
        Retrieve the first and last names of employees from the `Employees` table ordered by last name in alphabetical order.
        select FirstName, LastName from Employees 
        order by LastName; 

        ejemplos de ordenamiento BigQuery
        select * from DB.Sales where Product_ID like 'OFF%'
        order by Sales desc; 

        select * from DB.Customer order by City, age desc; 

        Limit 
        limita el numero de records regresados basado en el valor del limite

        limit row_count; 
        --va al final 

        ejemplos 
        select * from customer where age >= 25 order by age desc limit 8; 

        select * from customer where age >= 25 order by age asc limit 10; 

        ejercicio udemy 
        selecciona los 3 estudiantes ordenados por edad en orden desc
        select Name, Age from Students order by Age desc limit 3;

        BigQuery 
        limit no reduce el costo de query 
            ooooh solo es una ilusion visual reductiva
        si seleccionas algunas columnas pues solo te cobran eso. 
 
    Alias
        verb: AS 
        util para cambiar los nombres de las columnas en el resultado
        y para hacer referencias mas breves.

        Sintaxis
        select col as col_alias
        from table_name; 

        ejemplo 
        select cust_id as "serial_number", Customer_name as name from Customer; 

        ejercicio AS
        selecciona los nombres de los clientes y su cantidad de ordenes de la tabla orders renombrando la cantidad como cantidad total.
        select CustomerName, Amount as TotalAmount from Orders;

    Count
        hace el conteo, es una funcion de agregacion. 

        Sintaxis
        select col_name, count (col_name2)
        from table_name;

        ejemplos 
        select count(*) from sales; 

        select count(order_line) as "Number of Products Ordered",
        count (distinct order_id) as "Number of Orders"
        from sales where customer_id = 'CG-12520' 

        Ejercicio 
        cuenta el numero de ordenes en la tabla Orders
        select COUNT(*) from Orders;

        En bigQuery los nombres usados en alias no pueden tener espacios ni van entrecomillas ej
        select count(order_line) as N_of_products_purchased, 
        count(distict order_id) as N_of_orders from DB.Sales where customer_id = 'CG-12520'; 
    
    Sum
    suma, funcion de agregado

        sintaxis 
        select sum(profit) as "Total Profit" from sales;

        select sum(quantity) as "Total Quantity" from sales where product_id = 'FUR-TA-100000577';

        ejercicio
        Calcula el total de ordenes en la tabla Orders. 
        select SUM(Amount) from Orders;


    Average 
        Sintaxis 
        select avg(aggregate_expression)
        from tables 
        where conditions; 

        ejemplos
        select avg(age) as "Average Customer Age" from customer; 

        select avg(sales*10) as "Average Commission Value" from sales;

        ejercicio udemy 
        calcula el promedio de cantidad de ordenes en la tabla Orders. 
        select AVG(Amount) from Orders;

        BigQuery
        select avg(sales.sales*.10) as Avg_Comm_values from DB.Sales; 

    Min Max
        sintaxis
        select min(aggregate_expression) from tables where; 
        select max(aggregate_expression) from tables where; 
    
        ejemplos
        select min(sales) as "Minimum sales value June 15" from sales where order_date between '2015-06-01' and '2015-06-30';
        
        ejercicios 
        encuentra minimo y maximo de ordenes en tabla Orders.
        select MIN(Amount), MAX(Amount) from Orders;
        
        BigQuery 
        select max(sales.sales) as max_sales, min(sales.sales) as min_sales 
        from DB.Sales where Order_Date between '2015-06-01' and '2015-06-30';

Group by commands
    se usa en una declaracion select para agrupar los resultados por una o mas columnas
        
        sintaxis
        select col_name1, function type (col_2) from table
        group by col_1; 

        ejemplos
        select region, COUNT(customer_id) AS customer_count from customer Group by region; 

        select product_id, SUM(quantity) as quantity_sold from sales
        group by product_id order by quantity_sold desc; 

        select customer_id, min(sales) as min_sales, max(sales) as max_sales, avg(sales) as Average_sales,
        SUM(sales) AS Total_sales from sales group by customer_id 
        order by total_sales desc limit 5; 

        ejercicio
        calcula el total de ordenes col Amount de la tabla Orders por producto. 
            Pequeña pista si agrupas por producto vale la pena seleccionar esa columna tambien. 
        select Product, SUM(Amount) from Orders 
        group by Product;

        Bigquery group by 
        select category, count(Product_ID) as product_count from DB.Product
        group by category; 

    Having 
        usado en combinacion de un group by para poner una condicion y solo regresar los verdaderos para la condicion
        es un where de agregados hehe.

        sintaxis
        select columnnames, agregate_function(expression)
        from tables
        where *opcional* 
        group by col
        having condition

        ejemplo: 
        select region, count(customer_id) as customer_count
        from customer
        group by region
        having count(customer_id) > 200; 

        ejercicio having 
        select Product, SUM(Amount) 
        from Orders group by Product 
        having SUM(Amount) > 150;
        

    Ejercicio integrador: 
        Make a dashboard showing the following figures for each Product ID
        a. Total sales in $ order by this column in descending
        b. Total sales quantity
        c. Number of orders
        d. Max sales value
        e. Min sales value
        f. Average sales value
        2. Get the list of product IDs where the quantity of product sold is greater than 10.

        resultados
        select product_id, sum(sales) as total_sales_dlls, 
        sum(quantity) as total_sales_quantity, 
        count(sales) as number_of_orders, 
        max(sales) as max_sale, min(sales) as min_sale, 
        avg(sales) as average_sales from sales group by product_id order by total_sales_dlls desc;

        select product_id, sum(sales) as total_sales_dlls, 
        sum(quantity) as total_sales_quantity, 
        count(sales) as number_of_orders, 
        max(sales) as max_sale, min(sales) as min_sale, 
        avg(sales) as average_sales from sales group by product_id having sum(quantity) > 10 order by total_sales_dlls desc 
        ;

        En el segundo query se puede decidir si ver tanta info o solo lo necesario.
        Product ID 

        select product_id, 
        sum(quantity) as total_sales_quantity, 
        from sales group by product_id having sum(quantity) > 10 order by total_sales_dlls desc 
        ;

    declaracion condicional 
        case when
        similar a if else 

        sintaxis
        (case when condition es el if) then es el else
        case when condition then resultado
        END 

        case expression 
        when value then result 
        *se puede poner otro set o mas de when y al final un else si ninguna se cumple*
        end 

        ejemplos
        select *, 
        case when age<40 then 'Young'
            when age>60 then 'Senior Citizen' 
            else 'Middle aged\ 
        End as Age_category from customer; 

        Parece que funciona bien para feature engineering. 

        ejercicio udemy 
        Retrieve the names of customers from the `Orders` table along with a column that 
        categorizes them as 'High Value' if their order amount is greater than $150, 
        otherwise categorizes them as 'Standard Value'.

        select CustomerName, case 
            when Amount > 150 Then 'High Value'
            else 'Standard Value'
        end as CustomerCategory from Orders order by CustomerName;

    Joins 
    une tablas para recuperar informacion desde varias tablas.
    customer-product-sales 

    asi puedo saber cuantos productos se venden con desglose. 
    o quienes compran que productos y cuanto gastan 

    subqueries 
    hacen multiples niveles de analisis en un simple query
Agenda
    views. 
    se usan para guardar espacio y limitar acceso a la informacion 

    index 
    mejoran el tiempo de recuperacion desde una base de datos. 

    Por que combinar. 
    Quiero destinar recursos a diferentes regiones. Me puedes decir las ventas por region. 
    -Marketing head 


    sales data in sales table 
    and region from customer table

    key in common. Customer_ID 

    Para unir tablas se ocupa saber: 
    Nombres de las tablas a unir
    columna en comun con el cual se uniran 
    la lista de columnas de cada tabla que queremos conservar. 

    Tipos de union 
        
        inner join -simple
            lo que esta en comun 
            compara cada fila de la tabla 1 con cada fila de la tabla 2 los pares en comun se quedan y entre ambas forman una fila. 
       
            sintaxis
            select columns from table 1
            inner join table 2
            on table1.column = table2.column; 

            ejemplo 
            select 
            a.order_line, a.product_id, 
            a.customer_id, a.sales, b.customer_name, 
            b.age
            from sales_2015 as a 
            inner join customer_20_60 as b 
            on a.customer_id = b.customer_id 
            order by customer_id; 

            ejercicio 
            recupera los nombres de clientes y los productos que han ordenado 
            select
            a.CustomerName, 
            b.Product
            from Customers as a 
            inner join Orders as b 
            on a.CustomerID = b.CustomerID;

            BigQuery 
            select 
            a.order_line, 
            a.product_id, 
            a.customer_id,
            a.sales, 
            b.customer_name, 
            b.age
            from DB.sales_2015 as a
            inner join Customer_20_60 as b
            on customer_id = customer_id 
            order by DB.customer_id; 

        izquierda / left
            lo que esta en la primera tabla unido a lo en comun por la segunda.
        
            ejemplo
            select a.order_line, 
            a.product_id, 
            a.sales, 
            b.customer_name, 
            b.age
            from sales_2015 as a 
            left join customer_20_60 as b
            on a.customer_id = b.customer_id
            order by a.customer_id;

            ejercicio
            recupera los nombres de clientes y los productos que han ordenado. 

            select 
            a.CustomerName,
            b.Product
            from Customers as a 
            left join Orders as b
            on a.CustomerID = b.CustomerID; 
        
            BigQuery 
            select 
            a.order_line, 
            a.product_id, 
            a.sales, 
            b.customer_name, 
            b.age
            from DB.Sales_2015 as a 
            left join DB.Customer_20_60 as b
            on a.Customer_ID = b.Customer ID
            order by a.customer_id;

            tuve un detalle con los nombres exactos de las tablas por eso las comillas ` ` con nombres exactos que no seguian snakecase. 
            
            tambien se pueden cambiar los nombres con lo siguiente
                ALTER TABLE `DB.Customer_20_60`
                RENAME COLUMN `Customer ID` TO Customer_ID;

        completa / full join 
            lo que esta en ambas tablas. el mas amplio. 

            ejemplo
            select 
            a.order_line, 
            a.product_id, 
            a.customer_id,
            a.sales, 
            b.customer_name, 
            b.age,
            b.customer_id
            from sales_2015 as a
            full join customer_20_60 as b
            on a.customer_id = b.customer_id
            order by a.customer_id, b.customer_id;

            ejercicio
            recupera todos los clientes y sus ordenes incluyendo clientes que no han hecho ordenes y productos que no han sido ordenados.
            select
            a.CustomerName, 
            b.Product
            from Customers as a
            full join Orders as b
            on a.CustomerID = b.CustomerID;


            BigQuery
            select 
            a.order_line, 
            a.product_id, 
            a.customer_id,
            a.sales, 
            b.customer_name, 
            b.age,
            b.customer_id
            from sales_2015 as a
            full join customer_20_60 as b
            on a.customer_id = b.customer_id
            order by a.customer_id, b.customer_id;
            
            *se hacen los mismos cambios de usar los backticks y referencia a base de datos DB. mayus. 

        derecha / right 
            lo que esta en la segunda tabla unida a lo que esta conversado en la primera. 

            Ejemplo
            select 
            a.order_line, 
            a.product_id, 
            a.sales, 
            b.customer_id,
            b.customer_name, 
            b.age
            from sales_2015 as a 
            right join customer_20_60 as b
            on a.customer_id = b.customer_id
            order by a.customer_id;

            ejercicio
            recupera los productos que han sido ordenados y los nombres de los clientes que pusieron las ordenes
            select 
            a.CustomerName,
            b.Product
            from Customers as a
            right join Orders as b
            on a.CustomerID = b.CustomerID;

            BigQuery 
            select 
            a.order_line, 
            a.product_id, 
            a.sales, 
            b.`customer id`,
            b.`customer name`, 
            b.age
            from DB.Sales_2015 as a 
            right join DB.Customer_20_60 as b
            on a.customer_id = b.`customer id`
            order by a.customer_id;
        la perspectiva tambien importa. una izquierda y derecha pueden ser lo mismo si se invierte el orden de las tablas a unir en la sintaxis. 

        otra: cross join o cartesian join 

    combining queries 
        using 
        union, intersect and except. 

        ejemplos 
        /* Joins */

        /* Crear tabla de ventas en el año 2015 */
        create table sales_2015 as select * from sales where ship_date between '2015-01-01' and '2015-12-31';

        select count(*) from sales_2015; --2131

        select count(distinct customer_id) from sales_2015; --578

        /* Customers with age between 20 and 60 */

        create table customer_20_60 as select * from customer where age between 20 and 60;
        select count(*) from customer_20_60; --597

    Big Query 
    create table DB.Sales_2015 as select * from DB.Sales where Ship_Date between '2015-01-01' and '2015-12-31'; 

